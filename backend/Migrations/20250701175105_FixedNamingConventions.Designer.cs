// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250701175105_FixedNamingConventions")]
    partial class FixedNamingConventions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("backend.Components.Application.Models.JobApplication", b =>
                {
                    b.Property<int>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("application_id");

                    b.Property<int>("ApplicantId")
                        .HasColumnType("int")
                        .HasColumnName("applicant_id");

                    b.Property<DateTime>("AppliedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("applied_date");

                    b.Property<int>("CoverLetterId")
                        .HasColumnType("int")
                        .HasColumnName("cover_letter_id");

                    b.Property<int>("JobId")
                        .HasColumnType("int")
                        .HasColumnName("job_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("ApplicationId");

                    b.HasIndex("CoverLetterId");

                    b.HasIndex("JobId");

                    b.HasIndex("ApplicantId", "JobId")
                        .IsUnique();

                    b.ToTable("JobApplications");
                });

            modelBuilder.Entity("backend.Components.Bookmark.Models.Bookmark", b =>
                {
                    b.Property<int>("BookmarkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("bookmark_id");

                    b.Property<int>("ApplicantId")
                        .HasColumnType("int")
                        .HasColumnName("applicant_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("JobsId")
                        .HasColumnType("int")
                        .HasColumnName("jobs_id");

                    b.HasKey("BookmarkId");

                    b.HasIndex("ApplicantId", "JobsId")
                        .IsUnique();

                    b.ToTable("Bookmarks");
                });

            modelBuilder.Entity("backend.Components.Company.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AreaCode")
                        .HasColumnType("int");

                    b.Property<bool>("AuthorisedTrainingOrganisation")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Block")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CompanyContact")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CompanyDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("CompanyWebsite")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("CountryCode")
                        .HasColumnType("int");

                    b.Property<string>("CountryOfBusinessRegistration")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EmploymentType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Floor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("IndustryCluster")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("NumberOfEmployees")
                        .HasColumnType("int");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("PreferredCompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UEN")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UnitNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ZoneLocation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CompanyId");

                    b.HasIndex("UEN")
                        .IsUnique();

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("backend.Components.CoverLetter.Models.CoverLetter", b =>
                {
                    b.Property<int>("CoverLetterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cover_letter_id");

                    b.Property<int>("ApplicantId")
                        .HasColumnType("int")
                        .HasColumnName("applicant_id");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("content_type");

                    b.Property<string>("CoverLetterPath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("cover_letter_path");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size");

                    b.Property<string>("OriginalText")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("original_text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("CoverLetterId");

                    b.HasIndex("ApplicantId");

                    b.ToTable("CoverLetters");
                });

            modelBuilder.Entity("backend.Components.JobListing.Models.JobListing", b =>
                {
                    b.Property<int>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("job_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deadline");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_visible");

                    b.Property<string>("JobDescription")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("job_description");

                    b.Property<string>("JobDuration")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("job_duration");

                    b.Property<string>("JobRequirements")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("job_requirements");

                    b.Property<string>("JobScheme")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("job_scheme");

                    b.Property<string>("JobStatus")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("job_status");

                    b.Property<string>("ListingName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("listing_name");

                    b.Property<int>("MaxVacancies")
                        .HasColumnType("int")
                        .HasColumnName("max_vacancies");

                    b.Property<int>("PermittedQualifications")
                        .HasColumnType("int")
                        .HasColumnName("permitted_qualifications");

                    b.Property<float>("Rate")
                        .HasColumnType("float")
                        .HasColumnName("rate");

                    b.Property<int>("RecruiterId")
                        .HasColumnType("int")
                        .HasColumnName("recruiter_id");

                    b.Property<string>("RemunerationType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("remuneration_type");

                    b.Property<int>("Skillsets")
                        .HasColumnType("int")
                        .HasColumnName("skillsets");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("WorkingHours")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("working_hours");

                    b.HasKey("JobId");

                    b.HasIndex("RecruiterId");

                    b.ToTable("JobListings");
                });

            modelBuilder.Entity("backend.Components.JobScheme.Models.JobScheme", b =>
                {
                    b.Property<int>("SchemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("scheme_id");

                    b.Property<string>("SchemeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("scheme_name");

                    b.HasKey("SchemeId");

                    b.HasIndex("SchemeName")
                        .IsUnique();

                    b.ToTable("JobSchemes");
                });

            modelBuilder.Entity("backend.Components.JobSkill.Models.JobSkill", b =>
                {
                    b.Property<int>("JobSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("job_skill_id");

                    b.Property<int>("JobId")
                        .HasColumnType("int")
                        .HasColumnName("job_id");

                    b.Property<int>("SkillId")
                        .HasColumnType("int")
                        .HasColumnName("skill_id");

                    b.HasKey("JobSkillId");

                    b.HasIndex("JobId");

                    b.HasIndex("SkillId");

                    b.ToTable("JobSkills");
                });

            modelBuilder.Entity("backend.Components.Programme.Models.Programme", b =>
                {
                    b.Property<int>("ProgrammeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("programme_id");

                    b.Property<string>("ProgrammeName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("programme_name");

                    b.HasKey("ProgrammeId");

                    b.ToTable("Programmes");
                });

            modelBuilder.Entity("backend.Components.Qualification.Models.Qualification", b =>
                {
                    b.Property<int>("QualificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("qualification_id");

                    b.Property<int>("JobId")
                        .HasColumnType("int")
                        .HasColumnName("job_id");

                    b.Property<int>("ProgrammeId")
                        .HasColumnType("int")
                        .HasColumnName("programme_id");

                    b.HasKey("QualificationId");

                    b.HasIndex("JobId");

                    b.HasIndex("ProgrammeId");

                    b.ToTable("Qualifications");
                });

            modelBuilder.Entity("backend.Components.RemunerationType.Models.RemunerationType", b =>
                {
                    b.Property<int>("RemunerationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("remnmeration_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("type");

                    b.HasKey("RemunerationId");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("RemunerationTypes");
                });

            modelBuilder.Entity("backend.Components.Resume.Models.Resume", b =>
                {
                    b.Property<int>("ResumeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("resume_id");

                    b.Property<int>("ApplicantId")
                        .HasColumnType("int")
                        .HasColumnName("applicant_id");

                    b.Property<string>("ResumePath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("resume_path");

                    b.Property<string>("ResumeText")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("resume_text");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("uploaded_at");

                    b.HasKey("ResumeId");

                    b.HasIndex("ApplicantId");

                    b.ToTable("Resumes");
                });

            modelBuilder.Entity("backend.Components.Skill.Models.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("skill_id");

                    b.Property<string>("skill")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("skill");

                    b.HasKey("SkillId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("backend.Components.User.Models.RefreshToken", b =>
                {
                    b.Property<int>("RefreshTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("refresh_token_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expires_at");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_revoked");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("revoked_at");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("token");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("RefreshTokenId");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("backend.User.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("admin_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("AdminId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("backend.User.Models.Applicant", b =>
                {
                    b.Property<int>("ApplicantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("applicant_id");

                    b.Property<int>("AdmitYear")
                        .HasColumnType("int")
                        .HasColumnName("admit_year");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("ProgrammeId")
                        .HasColumnType("int")
                        .HasColumnName("programme_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("ApplicantId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Applicants");
                });

            modelBuilder.Entity("backend.User.Models.Recruiter", b =>
                {
                    b.Property<int>("RecruiterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("recruiter_id");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("department");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("job_title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("RecruiterId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Recruiters");
                });

            modelBuilder.Entity("backend.User.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("gender");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_verified");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.Property<string>("ProfilePicturePath")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("profile_picture_path");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("salt");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserType")
                        .HasColumnType("int")
                        .HasColumnName("user_type");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("backend.Components.Application.Models.JobApplication", b =>
                {
                    b.HasOne("backend.User.Models.Applicant", "Applicant")
                        .WithMany()
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Components.CoverLetter.Models.CoverLetter", "CoverLetter")
                        .WithMany()
                        .HasForeignKey("CoverLetterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend.Components.JobListing.Models.JobListing", null)
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("CoverLetter");
                });

            modelBuilder.Entity("backend.Components.CoverLetter.Models.CoverLetter", b =>
                {
                    b.HasOne("backend.User.Models.Applicant", null)
                        .WithMany()
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Components.JobListing.Models.JobListing", b =>
                {
                    b.HasOne("backend.User.Models.Recruiter", null)
                        .WithMany()
                        .HasForeignKey("RecruiterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Components.JobSkill.Models.JobSkill", b =>
                {
                    b.HasOne("backend.Components.JobListing.Models.JobListing", null)
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Components.Skill.Models.Skill", null)
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Components.Qualification.Models.Qualification", b =>
                {
                    b.HasOne("backend.Components.JobListing.Models.JobListing", null)
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Components.Programme.Models.Programme", null)
                        .WithMany()
                        .HasForeignKey("ProgrammeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Components.Resume.Models.Resume", b =>
                {
                    b.HasOne("backend.User.Models.Applicant", null)
                        .WithMany()
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Components.User.Models.RefreshToken", b =>
                {
                    b.HasOne("backend.User.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.User.Models.Admin", b =>
                {
                    b.HasOne("backend.User.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.User.Models.Applicant", b =>
                {
                    b.HasOne("backend.User.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.User.Models.Recruiter", b =>
                {
                    b.HasOne("backend.Components.Company.Models.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend.User.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
